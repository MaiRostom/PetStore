{
	"info": {
		"_postman_id": "11395b9a-cb8b-4843-a507-77eef4c20eab",
		"name": "PetStore-Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "525259",
		"_collection_link": "https://www.postman.com/restless-resonance-922790/workspace/pet-store/collection/525259-11395b9a-cb8b-4843-a507-77eef4c20eab?action=share&source=collection_link&creator=525259"
	},
	"item": [
		{
			"name": "1. Pet",
			"item": [
				{
					"name": "1.1 Create New Pet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"// Generate a random number between 100 and 1000\r",
									"\r",
									"function generateRandomNumber(min, max) {\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"pm.collectionVariables.set(\"petID\", generateRandomNumber(10, 1000));\r",
									"pm.collectionVariables.set(\"catID\", generateRandomNumber(100, 1000));\r",
									"pm.collectionVariables.set(\"tagID\", generateRandomNumber(100, 1000));\r",
									"\r",
									"\r",
									"// Function to generate a random string of letters with a given length\r",
									"function generateRandomLetters(length) {\r",
									"    const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"    let result = '';\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        const randomIndex = Math.floor(Math.random() * letters.length);\r",
									"        result += letters.charAt(randomIndex);\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate a random length between 8 and 10\r",
									"const randomLength = Math.floor(Math.random() * (10 - 8 + 1)) + 8;\r",
									"\r",
									"// Generate a random string of letters with the generated length\r",
									"const randomLetters = generateRandomLetters(randomLength);\r",
									"\r",
									"// Set the 'name' variable in the collection\r",
									"pm.collectionVariables.set('categoryname', randomLetters);\r",
									"\r",
									"const petName = generateRandomLetters(randomLength);\r",
									"pm.collectionVariables.set('petName', petName);\r",
									"\r",
									"const tagName = generateRandomLetters(randomLength);\r",
									"pm.collectionVariables.set('tagName', tagName);\r",
									"\r",
									"\r",
									"// Generate a random birth year between 1990 and 1999\r",
									"const birthYear = Math.floor(Math.random() * (1999 - 1990 + 1)) + 1990;\r",
									"\r",
									"// Generate random birth month and day\r",
									"const birthMonth = String(Math.floor(Math.random() * 12) + 1).padStart(2, '0');\r",
									"const birthDay = String(Math.floor(Math.random() * 28) + 1).padStart(2, '0');\r",
									"\r",
									"// Concatenate the components to form the formatted birthdate\r",
									"const formattedBirthdate = `${birthDay}/${birthMonth}/${birthYear}`;\r",
									"\r",
									"// Set the formatted birthdate in the request\r",
									"pm.environment.set('formattedBirthdate', formattedBirthdate);\r",
									"console.log('Generated Birthdate :', formattedBirthdate);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"///////////////Status////////////////\r",
									"// Generate a random number (0, 1, or 2)\r",
									"const randomIndex = Math.floor(Math.random() * 3);\r",
									"\r",
									"// Set 'statusType' based on the randomIndex\r",
									"let statusType;\r",
									"switch (randomIndex) {\r",
									"  case 0:\r",
									"    statusType = 'available';\r",
									"    break;\r",
									"  case 1:\r",
									"    statusType = 'pending';\r",
									"    break;\r",
									"  case 2:\r",
									"    statusType = 'sold';\r",
									"    break;\r",
									"}\r",
									"\r",
									"// Set the 'statusType' variable in the collection\r",
									"pm.collectionVariables.set('statusType', statusType);\r",
									"\r",
									"\r",
									"\r",
									"///////////random links////////////////\r",
									"function generateRandomLink() {\r",
									"  const baseUrl = 'https://example.com';\r",
									"  const paths = ['/page1', '/page2', '/page3'];\r",
									"  const queryParams = { param1: 'value1', param2: 'value2', param3: 'value3' };\r",
									"\r",
									"  const randomPath = paths[Math.floor(Math.random() * paths.length)];\r",
									"  const randomQueryParams = Object.entries(queryParams)\r",
									"    .map(([key, value]) => `${key}=${value}`)\r",
									"    .join('&');\r",
									"\r",
									"  return `${baseUrl}${randomPath}?${randomQueryParams}`;\r",
									"}\r",
									"\r",
									"// Example: Get a random link\r",
									"const randomLink = generateRandomLink();\r",
									"pm.collectionVariables.set(\"randomLink\",randomLink);\r",
									"console.log('Random Link:', randomLink);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response Schema contain property An Object\r",
									"pm.test('[1.Pet][1.1 Create New Pet].[TC2].Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');});\r",
									"///////////////////////////// TCS for ID  //////////////////////////////\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC3]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null/undefined\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC4]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC5]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//check id length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC6]-Check id length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).id).length).to.be.greaterThan(13)\r",
									"});\r",
									"//Check pet id dont have letters \r",
									"pm.test(\"[1.Pet].[1.1 Create New Pet].[TC7].Check pet id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"//Check Pet_ID value in response \r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC8]- Check response pet ID is: \" + JSON.parse(responseBody).id, function () {\r",
									"    pm.expect(JSON.parse(request.data).id).to.be.equal(JSON.parse(responseBody).id)\r",
									"});\r",
									"////////////////////////////TCs for name/////////////////////////////\r",
									"//Check Schema has name property\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC9]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"});\r",
									"//Check Name function not null/undefined\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC10].Check Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null);\r",
									"        pm.expect(JSON.parse(responseBody).name).to.not.equal(undefined);\r",
									"\r",
									"});\r",
									"\r",
									"//Check Name lenghth\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC11].Check Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name.length).to.be.within(8 ,10);\r",
									"});\r",
									"//check name to be string\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC12].Check Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"//Check Name to match small letters\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC13].Check Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"//Check Name dont contain numbers\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC14].Check Name to not contain numbers or ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.match(/[0-9]/);\r",
									"});\r",
									"//Check name value in response \r",
									"pm.test(\"[1.Pet].[1.1 CreateNewPet].[TC15]-Check name in response is: \" + JSON.parse(responseBody).name, function () {\r",
									"    pm.expect(JSON.parse(request.data).name).to.be.equal(JSON.parse(responseBody).name)\r",
									"});\r",
									"// ////////////////////////// TCS for Category object ////////////////////////////\r",
									"\r",
									"//check response body contain category object \r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC16]- Check respose schema contain category property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"});\r",
									"//check category is not null/undefined\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC17]- Check category is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(undefined)\r",
									"});\r",
									"//check category is an object\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC18]- Check category is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal('object')\r",
									"});\r",
									"//Check response category contain property name\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC19].Check response category contain property name',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('name');\r",
									"});\r",
									"\r",
									"//Check response category contain property id\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC20].Check response category contain property id',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('id');\r",
									"});\r",
									"\r",
									"\r",
									"// ////////////////////////// TCS for Category ID //////////////////////////\r",
									"\r",
									"\r",
									"//check Category_ID is not null/undefined\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC21]- Check category_ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_ID  is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC22]- Check category_ID is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check Category_ID length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC23]-Check category_ID length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).category.id).length).to.be.greaterThan(13)\r",
									"});\r",
									"\r",
									"//Check ID to be from 100 to 1000\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC24].Check category id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.within(100 ,1000);\r",
									"});\r",
									"//Check category id does not contain letters\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC25].Check category id not contain letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"// /////////////////////////////// TCS for Category Name /////////////////////////////////\r",
									"\r",
									"//check Category_name is not null/undefined\r",
									"pm.test(\"[1.Pet][1.1 Create New Pet][TC26]- Check category_name is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC27]- Check category_name is String data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check Category_name length greater than 7 char\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC28]-Check category_name length is greater than 7 chars\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.greaterThan(7)\r",
									"});\r",
									"//Check Category Name lenghth beyween (8 and 10)\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC29].Check Category Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"    //Check Category Name to match small letters\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC30].Check Category Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"//Check Category Name does not contain numbers \r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC31].Check Category Name to not contain numbers or', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.match(/[0-9]/);\r",
									"});\r",
									"\r",
									"\r",
									"// /////////////////////////// TCS for  Tags ///////////////////////////////\r",
									"\r",
									"//Check response tags contain property\r",
									"/////////////Check Schema has Tag Property/////////\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC32]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\");\r",
									"});\r",
									"//check Tags  is array (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC33]- Check name is String data type \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.be.an('array');\r",
									"});\r",
									"//Check tags[0] is an object\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC34].Check tags an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.be.an('object')\r",
									"});\r",
									"//Check response tags contain property id\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC35].Check response tags contain property id', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('id');\r",
									"});\r",
									"//Check response tags contain property name\r",
									"\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC36].Check response tags contain property name', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"////////////////////////////////TCs for Tag ID/////////////////////////\r",
									"\r",
									"//check tagID is not null/undefined\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC37].Check tags id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(null);\r",
									"        pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(undefined);\r",
									"\r",
									"});\r",
									"//Check tags id greaterthan 2\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC38].Check tags id greaterthan 2 ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"//Check tags id to be within 100-1000\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC39].Check tags id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.within(100 ,1000);\r",
									"});\r",
									"//check tag id is a number\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC40].Check tags id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.a('Number');\r",
									"});\r",
									"//check tag id is not letters\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC41].Check tags id to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.match(/[A-Za-z]/);\r",
									"    \r",
									"});\r",
									"//Check Tags_id  value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC42]-Check Tags_id  value in response: \" + JSON.parse(responseBody).tags[0].id, function () {\r",
									"    pm.expect(JSON.parse(request.data).tags[0].id).to.be.equal(JSON.parse(responseBody).tags[0].id)\r",
									"});\r",
									"\r",
									"///////////////////////////TCs for Tag Name///////////////////////\r",
									"\r",
									"//check tag name is not null/undefined\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC43].Check tags Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(null);\r",
									"        pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(undefined);\r",
									"\r",
									"});\r",
									"//check tag name length is within (8 and 10)\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC44].Check tags Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name.length).to.be.within(8 ,10);\r",
									"});\r",
									"//check tag name is small letters\r",
									"\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC45].Check tags Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.match(/[a-z]/);\r",
									"});\r",
									"//check tag name is not numbers\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC46].Check tags Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.match(/[0-9]/);\r",
									"});\r",
									"\r",
									"//Check Tags_id  value in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC47]-Check Tags_id  value in response: \" + JSON.parse(responseBody).tags[0].name, function () {\r",
									"    pm.expect(JSON.parse(request.data).tags[0].name).to.be.equal(JSON.parse(responseBody).tags[0].name)\r",
									"});\r",
									"\r",
									"// ///////////////////////////////// TCs for  PhotoUrls //////////////////////////////////\r",
									"\r",
									"//check response body contain PhotoUrls \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC48]- Check respose schema contain PhotoUrls property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('photoUrls');\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is not null/undefined\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC49]-Check PhotoUrls is not null\", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is array  data type\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC50]-Check PhotoUrls is array data type \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.be.an('array');\r",
									"});\r",
									"\r",
									"//Check  PhotoUrls in response \r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC51]-Check PhotoUrls in response is: \" + JSON.parse(responseBody).PhotoUrls, function () {\r",
									"    pm.expect(JSON.parse(request.data).PhotoUrls).to.be.equal(JSON.parse(responseBody).PhotoUrls)\r",
									"});\r",
									"pm.test('[1.Pet].[1.CreateNewPet].[TC52].Check PhotoUrl is URL', function (){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls[0]).to.match(/^https?:\\/\\/\\S+$/);\r",
									"});\r",
									"\r",
									"\r",
									"// ///////////////////////////////////  TCs for status  ////////////////////////////////\r",
									"\r",
									"//Check respose schema contain status property\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC53]- Check respose schema contain status property \", function () {\r",
									"     pm.expect(JSON.parse(responseBody)).to.have.property('status');\r",
									"});\r",
									"\r",
									"//Check the status property type of string\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC54]- Check the status property type of string \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"\r",
									"});\r",
									"// Check the status property not null/undifiend\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC55]- Check status property  is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//Check value in response\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC56]-  Check status property   value in response: \" + JSON.parse(request.data).tags.id, function () {\r",
									"    pm.expect(JSON.parse(request.data).status).to.be.equal(JSON.parse(responseBody).status)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": {{petID}},\r\n  \"category\": {\r\n    \"id\": {{catId}},\r\n    \"name\": \"{{categoryname}}\"\r\n  },\r\n  \"name\": \"{{petName}}\",\r\n  \"photoUrls\": [\r\n    \"{{randomLink}}\"\r\n  ],\r\n  \"tags\": [\r\n    {\r\n      \"id\": {{tagID}},\r\n      \"name\": \"{{tagName}}\"\r\n    }\r\n  ],\r\n  \"status\": \"{{status}}\"\r\n}"
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.2 Find Pet By Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"const arrayOfObjects = JSON.parse(responseBody);\r",
									"//check response body contain id \r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC2]- Check respose schema contain id property\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        pm.expect(object).to.have.property(\"id\")\r",
									"    }\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC3]- Check ID is not null\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        pm.expect(object.id).to.not.equal(null)\r",
									"        pm.expect(object.id).to.not.equal(undefined)\r",
									"    }\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC4]- Check id is number/data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        pm.expect(typeof object.id).to.be.equal('number')\r",
									"    }\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC5]-Check id is includes numbers only\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        pm.expect(object.id).to.match(/^\\d+$/)\r",
									"    }\r",
									"});\r",
									"\r",
									"//=================================================================================================\r",
									"// ************************************** TCS for Category object **********************************\r",
									"\r",
									"//check response body contain category object \r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC6]- Check respose schema contain category property\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"            pm.expect(object).to.have.property(\"category\")\r",
									"        }\r",
									"    }\r",
									"});\r",
									"//check category is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC7]- Check category is not null\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        pm.expect(object.category).to.not.equal(null)\r",
									"    }\r",
									"});\r",
									"//check category is object (data type)\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC8]- Check category is number/data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"            pm.expect(typeof object.category).to.be.equal('object')\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"//=================================================================================================\r",
									"// ************************************** TCS for Category ID **********************************\r",
									"\r",
									"//check response body contain Category_ID \r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC9]- Check respose schema contain category_ID property\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"            pm.expect(object.category).to.haveOwnProperty('id')\r",
									"        }\r",
									"        else { pm.expect(\"The Category object does not have the property 'category_ID'\"); }\r",
									"    }\r",
									"});\r",
									"\r",
									"//check Category_ID is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC10]- Check category_ID is not null\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"            pm.expect(object.category.id).to.not.equal(null)\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"//check Category_ID  is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC11]- Check category_ID is number/data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"            pm.expect(typeof object.category.id).to.be.equal('number')\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"//Check Category_ID is includes numbers only\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC12]-Check Category_ID is includes numbers only\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        pm.expect(object.id).to.match(/^\\d+$/)\r",
									"    }\r",
									"});\r",
									"\r",
									"//===============================================================================================\r",
									"// ************************************** TCS for Category Name **********************************\r",
									"\r",
									"//check response body contain Category_Name\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC13]- Check respose schema contain category_name property\", function (){\r",
									"     for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"    if (object.category.hasOwnProperty(\"name\")) {\r",
									"        pm.expect(object.category).to.haveOwnProperty('name')\r",
									"    } else { pm.expect(\"The Category object does not have the property 'name'\"); }}}\r",
									"});\r",
									"\r",
									"//check Category_name is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC14]- Check category_name is not null\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"        if (object.category !== undefined) {\r",
									"    pm.expect(object.category.name).to.not.equal(null)}}\r",
									"});\r",
									"\r",
									"//check Category_name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC15]- Check category_name is String data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.category !== undefined) {\r",
									"    pm.expect(typeof  object.category.name).to.be.equal('string')}}\r",
									"});\r",
									"\r",
									"//Check Category_name length less than 10 digit\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC16]-  Check category_name length is greater than 1 chars\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.category !== undefined) {\r",
									"    pm.expect(toString(object.category.name).length).to.be.greaterThan(1)}}\r",
									"});\r",
									"\r",
									"\r",
									"//===============================================================================================\r",
									"// ************************************** TCS for  Name *****************************************\r",
									"\r",
									"//check response body contain name\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC17]- Check respose schema contain name property\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    pm.expect(object.name)}\r",
									"});\r",
									"\r",
									"//check name is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC18]- Check name is not null\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    pm.expect(object.name).to.not.equal(null)\r",
									"    pm.expect(object.name).to.not.equal(undefined)}\r",
									"});\r",
									"\r",
									"//check name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC19]- Check name is String data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    pm.expect(typeof object.name).to.be.equal('string')}\r",
									"});\r",
									"\r",
									"//Check name length greater than 10 digit\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC20]-  Check name length is greater than 1 chars\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    pm.expect(toString(object.name).length).to.be.greaterThan(1)}\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//====================================================================================================\r",
									"// ************************************** TCs for  PhotoUrls *****************************************\r",
									"\r",
									"//check response body contain PhotoUrls\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC21]- Check respose schema contain PhotoUrls property\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.photoUrls !== undefined ||object.photoUrls !== null ) {\r",
									"    pm.expect(object.photoUrls)}}\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is not nulll\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC22]- Check PhotoUrls is not null\", function () {\r",
									"        for (const object of arrayOfObjects) {\r",
									"    if (object.photoUrls !== undefined ||object.photoUrls !== null ) {\r",
									"    pm.expect(Array.isArray(object.photoUrls)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(object.photoUrls)).to.not.equal(undefined)}}\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is array  data type\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC23]- Check PhotoUrls is array data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.photoUrls !== undefined ||object.photoUrls !== null ) {\r",
									"    pm.expect(Array.isArray(object.photoUrls))}}\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"// ******************************************* TCs for  Tags *****************************************\r",
									"\r",
									"\r",
									"//check response body contain Tags attribute\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC24]- Check respose schema contain Tags property\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.tags !== undefined) {\r",
									"    pm.expect(object).haveOwnProperty(\"tags\")}}\r",
									"});\r",
									"\r",
									"//check Tags array is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC25]- Check name is not null\", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.tags !== undefined) {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags)).to.not.equal(undefined)}}\r",
									"});\r",
									"\r",
									"//check Tags  is array (data type)\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC26]- Check name is String data type \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    if (object.tags !== undefined) {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).tags))}}\r",
									"});\r",
									"\r",
									"//check Tags is array of object instances\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC27]- Check n Tags is array of object instances \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags)\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"    pm.expect(typeof tag).to.be.equal('object')}\r",
									"}\r",
									"});\r",
									"//====================================================================================================\r",
									"// ************************************ TCs for  Tags Id instance  ***********************************\r",
									"\r",
									"//Check the ID enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC28]- Check  Tags_id  is enstance of the tags array of objects \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"    pm.expect(tag.hasOwnProperty('id'))}}}\r",
									"});\r",
									"\r",
									"//Check the ID enstance ia anumber\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC29]- Check n Tags_id object ID instance \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"    pm.expect(typeof tag.id).to.be.equal('number')}}}\r",
									"});\r",
									"\r",
									"//Check the id enstance length is greater than 13\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC30]- Check the Tags_id length is greater than 13 \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"pm.expect(toString(tag.id).length).to.be.greaterThan(13)\r",
									"  }}}\r",
									"});\r",
									"\r",
									"//Check the Tags_id enstance is not null\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC31]- Check Tags_id is not null\", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"    pm.expect(tag.id).to.not.equal(null)\r",
									"    pm.expect(tag.id).to.not.equal(undefined)}}}\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"//====================================================================================================\r",
									"// ************************************ TCs for Tags name instance  ***********************************\r",
									"\r",
									"//Check the name enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC32]- Check the Tags_name is enstance of the tags array of objects \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"    pm.expect(tag.hasOwnProperty('name'))}}}\r",
									"});\r",
									"\r",
									"//Check the name enstance for the tags array of objects\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC33]- Check the Tags_name enstance is type of name \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag.name !== null && tag.name !== undefined ) {\r",
									"  pm.expect(typeof tag.name).to.be.equal('string')\r",
									"  }}}\r",
									"});\r",
									"\r",
									"//Check the name enstance length is less than 10\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC34]- Check the Tags_name length is greater than 10 \", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag !== null && tag !== undefined ) {\r",
									"pm.expect(toString(tag.name).length).to.be.greaterThan(13)\r",
									"}}}\r",
									"});\r",
									"\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC35]- Check Tags_name is not null\", function () {\r",
									" for (const object of arrayOfObjects) {\r",
									"     for(const tag of object.tags){\r",
									"     if (tag.name !== null && tag.name !== undefined ) {\r",
									"    pm.expect(tag.name).to.not.equal(null)\r",
									"    pm.expect(tag.name).to.not.equal(undefined)}}}\r",
									"});\r",
									"\r",
									"//====================================================================================================\r",
									"// *********************************************  TCs for status  ***********************************\r",
									"\r",
									"//Check respose schema contain status property\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC36]- Check respose schema contain status property \", function () {\r",
									"     for (const object of arrayOfObjects) {\r",
									"    pm.expect(object).to.have.property(\"status\")}\r",
									"});\r",
									"\r",
									"//Check the status property type of string\r",
									"pm.test(\"[1.Pet][1.2FindPetByStatus][TC37]- Check the status property type of string \", function () {\r",
									"    for (const object of arrayOfObjects) {\r",
									"    pm.expect(typeof object.status).to.be.equal(\"string\")}\r",
									"\r",
									"});\r",
									"// Check the status property not null/undifiend\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC38]- Check status property  is not null\", function () {\r",
									"     for (const object of arrayOfObjects) {\r",
									"    pm.expect(object.status).to.not.equal(null)\r",
									"    pm.expect(object.status).to.not.equal(undefined)}\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseURL}}/v2/pet/findByStatus?status={{statusType}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "{{statusType}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1.3 GetPet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Check response Schema contain property An Object\r",
									"pm.test('[1.Pet][1.3 GetPet].[TC2].Check response body an object', function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.be.an('object');});\r",
									"///////////////////////////// TCS for ID  //////////////////////////////\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[1.Pet][1.3 GetPett][TC3]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null/undefined\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC4]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC5]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//check id length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC6]-Check id length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).id).length).to.be.greaterThan(13)\r",
									"});\r",
									"//Check pet id dont have letters \r",
									"pm.test(\"[1.Pet].[1.3 GetPet].[TC7].Check pet id not contail letters  \",function(){\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"\r",
									"////////////////////////////TCs for name/////////////////////////////\r",
									"//Check Schema has name property\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC8]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"name\")\r",
									"});\r",
									"//Check Name function not null/undefined\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC9].Check Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.equal(null);\r",
									"        pm.expect(JSON.parse(responseBody).name).to.not.equal(undefined);\r",
									"\r",
									"});\r",
									"\r",
									"//Check Name lenghth\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC10].Check Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name.length).to.be.within(8 ,10);\r",
									"});\r",
									"//check name to be string\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC11].Check Name to be string', function (){\r",
									"    pm.expect(String(JSON.parse(responseBody).name)).to.be.a('string');\r",
									"});\r",
									"\r",
									"//Check Name to match small letters\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC12].Check Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"//Check Name dont contain numbers\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC13].Check Name to not contain numbers or ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).name).to.not.match(/[0-9]/);\r",
									"});\r",
									"\r",
									"// ////////////////////////// TCS for Category object ////////////////////////////\r",
									"\r",
									"//check response body contain category object \r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC14]- Check respose schema contain category property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"category\")\r",
									"});\r",
									"//check category is not null/undefined\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC15]- Check category is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category).to.not.equal(undefined)\r",
									"});\r",
									"//check category is an object\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC16]- Check category is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category).to.be.equal('object')\r",
									"});\r",
									"//Check response category contain property name\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC17].Check response category contain property name',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('name');\r",
									"});\r",
									"\r",
									"//Check response category contain property id\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC18].Check response category contain property id',function (){\r",
									"    pm.expect(JSON.parse(responseBody).category).to.have.property('id');\r",
									"});\r",
									"\r",
									"\r",
									"// ////////////////////////// TCS for Category ID //////////////////////////\r",
									"\r",
									"\r",
									"//check Category_ID is not null/undefined\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC19]- Check category_ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_ID  is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC20]- Check category_ID is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check Category_ID length greater than 13 digit\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC21]-Check category_ID length is greater than 13 digit\", function () {\r",
									"    pm.expect(toString(JSON.parse(responseBody).category.id).length).to.be.greaterThan(13)\r",
									"});\r",
									"\r",
									"//Check ID to be from 100 to 1000\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC22].Check category id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.be.within(100 ,1000);\r",
									"});\r",
									"//Check category id does not contain letters\r",
									"pm.test('[1.Pet].[1.3 GetPett].[TC23].Check category id not contain letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.id).to.not.match(/[A-Za-z]/);\r",
									"});\r",
									"// /////////////////////////////// TCS for Category Name /////////////////////////////////\r",
									"\r",
									"//check Category_name is not null/undefined\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC24]- Check category_name is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//check Category_name  is String (data type)\r",
									"pm.test(\"[1.Pet][1.1CreateNewPet][TC25]- Check category_name is String data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).category.name).to.be.equal('string')\r",
									"});\r",
									"\r",
									"//Check Category_name length greater than 7 char\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC26]-Check category_name length is greater than 7 chars\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.greaterThan(7)\r",
									"});\r",
									"//Check Category Name lenghth beyween (8 and 10)\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC27].Check Category Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name.length).to.be.within(8 ,10);\r",
									"});\r",
									"\r",
									"    //Check Category Name to match small letters\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC28].Check Category Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.match(/[a-z]/);\r",
									"});\r",
									"\r",
									"//Check Category Name does not contain numbers \r",
									"pm.test('[1.Pet].[1.3 GetPet].[`TC29`].Check Category Name to not contain numbers or', function (){\r",
									"    pm.expect(JSON.parse(responseBody).category.name).to.not.match(/[0-9]/);\r",
									"});\r",
									"\r",
									"\r",
									"// /////////////////////////// TCS for  Tags ///////////////////////////////\r",
									"\r",
									"//Check response tags contain property\r",
									"/////////////Check Schema has Tag Property/////////\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC30]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"tags\");\r",
									"});\r",
									"//check Tags  is array (data type)\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC31]- Check name is String data type \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).tags).to.be.an('array');\r",
									"});\r",
									"//Check tags[0] is an object\r",
									"pm.test('[1.Pet].[1.1 Create New Pet].[TC32].Check tags an object',function(){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.be.an('object')\r",
									"});\r",
									"//Check response tags contain property id\r",
									"pm.test('[1.Pet].[1.3 GetPett].[TC33].Check response tags contain property id', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('id');\r",
									"});\r",
									"//Check response tags contain property name\r",
									"\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC34].Check response tags contain property name', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0]).to.have.property('name');\r",
									"});\r",
									"\r",
									"////////////////////////////////TCs for Tag ID/////////////////////////\r",
									"\r",
									"//check tagID is not null/undefined\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC35].Check tags id not null ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(null);\r",
									"        pm.expect(JSON.parse(responseBody).tags[0].id).to.not.equal(undefined);\r",
									"\r",
									"});\r",
									"//Check tags id greaterthan 2\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC36].Check tags id greaterthan 2 ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id.toString().length).to.be.greaterThan(2);\r",
									"});\r",
									"//Check tags id to be within 100-1000\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC37].Check tags id to be within 100-1000', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.within(100 ,1000);\r",
									"});\r",
									"//check tag id is a number\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC38].Check tags id to be a number', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.be.a('Number');\r",
									"});\r",
									"//check tag id is not letters\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC39].Check tags id to not match letters ', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].id).to.not.match(/[A-Za-z]/);\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									"///////////////////////////TCs for Tag Name///////////////////////\r",
									"\r",
									"//check tag name is not null/undefined\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC40].Check tags Name not null', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(null);\r",
									"        pm.expect(JSON.parse(responseBody).tags[0].name).to.not.equal(undefined);\r",
									"\r",
									"});\r",
									"//check tag name length is within (8 and 10)\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC41].Check tags Name lenghth', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name.length).to.be.within(8 ,10);\r",
									"});\r",
									"//check tag name is small letters\r",
									"\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC42].Check tags Name to match small letters', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.match(/[a-z]/);\r",
									"});\r",
									"//check tag name is not numbers\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC43].Check tags Name to not contain numbers or A-Z', function (){\r",
									"    pm.expect(JSON.parse(responseBody).tags[0].name).to.not.match(/[0-9]/);\r",
									"});\r",
									"\r",
									"\r",
									"// ///////////////////////////////// TCs for  PhotoUrls //////////////////////////////////\r",
									"\r",
									"//check response body contain PhotoUrls \r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC44]- Check respose schema contain PhotoUrls property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property('photoUrls');\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is not null/undefined\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC45]-Check PhotoUrls is not null\", function () {\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(null)\r",
									"    pm.expect(Array.isArray(JSON.parse(responseBody).photoUrls)).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									"//Check PhotoUrls is array  data type\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC46]-Check PhotoUrls is array data type \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls).to.be.an('array');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test('[1.Pet].[1.3 GetPet].[TC47].Check PhotoUrl is URL', function (){\r",
									"    pm.expect(JSON.parse(responseBody).photoUrls[0]).to.match(/^https?:\\/\\/\\S+$/);\r",
									"});\r",
									"\r",
									"\r",
									"// ///////////////////////////////////  TCs for status  ////////////////////////////////\r",
									"\r",
									"//Check respose schema contain status property\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC48]- Check respose schema contain status property \", function () {\r",
									"     pm.expect(JSON.parse(responseBody)).to.have.property('status');\r",
									"});\r",
									"\r",
									"//Check the status property type of string\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC49]- Check the status property type of string \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal(\"string\")\r",
									"\r",
									"});\r",
									"// Check the status property not null/undifiend\r",
									"pm.test(\"[1.Pet][1.3 GetPet][TC50]- Check status property  is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{petID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.4 UpdatePet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomStringWithLetters(minLength, maxLength) {\r",
									"  const characterPool = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r",
									"  const stringLength = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;\r",
									"  let randomString = '';\r",
									"\r",
									"  for (let i = 0; i < stringLength; i++) {\r",
									"    randomString += characterPool[Math.floor(Math.random() * characterPool.length)];\r",
									"  }\r",
									"  return randomString;\r",
									"}\r",
									"pm.collectionVariables.set(\"updatedName\", generateRandomStringWithLetters(8, 10));\r",
									" //=============================================================================================\r",
									" ///////////////Status////////////////\r",
									"// Generate a random number (0, 1, or 2)\r",
									"const randomIndex = Math.floor(Math.random() * 3);\r",
									"\r",
									"// Set 'statusType' based on the randomIndex\r",
									"let statusType;\r",
									"switch (randomIndex) {\r",
									"  case 0:\r",
									"    statusType = 'available';\r",
									"    break;\r",
									"  case 1:\r",
									"    statusType = 'pending';\r",
									"    break;\r",
									"  case 2:\r",
									"    statusType = 'sold';\r",
									"    break;\r",
									"}\r",
									"\r",
									"// Set the 'statusType' variable in the collection\r",
									"pm.collectionVariables.set('updatedStatusType', statusType);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status Code is 200\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet].[TC1]-Check if code field is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.eql(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"\r",
									"///////////////////// TCS for code //////////////////////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC3][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"// ////////////////// TCS for message  ///////////////////////////\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get('petID').toString())\r",
									"        console.log((JSON.parse(responseBody).message),(pm.collectionVariables.get('petID').toString()));\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[1-Pet][1.4 UpdatePet][TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "\"{{$randomFirstName}} {{$randomLastName}}\"",
									"type": "text"
								},
								{
									"key": "status",
									"value": "\"{{updatedStatus}}\"",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{petID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "1.5 Delete Pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/////////////////////Testcases for code/////////////////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID].[TC5]-Check if code field is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.eql(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//////////////Test cases for Type Field/////////////////////////////////\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"////////////////////Test cases for message Field/////////////\r",
									"//check response body contain message property \r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[1.Pet][1.5 Delete Pet by ID][TC16]-Check if Message field has the same username to be deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get('petID').toString());\r",
									"        console.log((JSON.parse(responseBody).message),(pm.collectionVariables.get('petID').toString()));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/pet/{{petID}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"pet",
								"{{petID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Store",
			"item": [
				{
					"name": "2.1 Place order for a pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// testcases\r",
									"// 1- check status code is 200\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//// 2- check response schema contains id,petID,quanity,shipdate,status,complete/////////////////////\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC2]-Check Response include orderID property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC3]-Check Response include petId property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC4]-Check Response include quantity property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC5]-Check Response include shipDate property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"});\r",
									"  pm.test(\"[2-store].[2.1 Place order for a pet].[TC6]-Check Response include status property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"});\r",
									" pm.test(\"[2-store].[2.1 Place order for a pet].[TC7]-Check Response include complete property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"complete\")\r",
									"});\r",
									"\r",
									"////////////3-check values are not null or undefined////////////////////////////////////\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC8]-Check ID isnot null: \"+JSON.parse(responseBody).id,function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC9]-Check Pet ID isnot null: \"+JSON.parse(responseBody).petId,function(){\r",
									"     pm.expect(JSON.parse(responseBody).petId).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).petId).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC10]-Check quantity isnot null: \"+JSON.parse(responseBody).quantity,function(){\r",
									"     pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).quantity).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC11]-Check shipDate isnot null: \"+JSON.parse(responseBody).shipDate,function(){\r",
									"     pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC12]-Check status isnot null: \"+JSON.parse(responseBody).status,function(){\r",
									"     pm.expect(JSON.parse(responseBody).status).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].13-Check complete isnot null: \"+JSON.parse(responseBody).complete,function(){\r",
									"     pm.expect(JSON.parse(responseBody).complete).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).complete).to.not.equal(undefined);\r",
									"});\r",
									"//////////////4-check Data Type Validation//////////////////////////////\r",
									"// Test for Data Type Validation\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC14]-Data Type Validation: orderId should be an integer\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC15]-Data Type Validation: petId should be a number\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).petId).to.be.equal(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC16]-Data Type Validation: quantity should be an integer\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).quantity).to.eql(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC17]-Data Type Validation: shipDate should be a valid date\", function () {\r",
									"  const shipDate = JSON.parse(responseBody).shipDate;\r",
									"  pm.expect(new Date(shipDate)).to.not.equal(\"Invalid Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC18]-Data Type Validation: completeStatus should be a boolean\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).complete).to.be.equal(\"boolean\");\r",
									"});\r",
									"\r",
									"///////////////////////////5-check Actual with Expected////////////////////////////////////////////////\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC19]-Actual and Expected Results:Check ID value is \"+JSON.parse(request.data).id,function(){\r",
									"    pm.expect(JSON.parse(request.data).id).to.be.equal((JSON.parse(responseBody).id).toString());\r",
									"});\r",
									"\r",
									"// pm.test(\"[2-store].[2.1 Place order for a pet].[TC20]-Actual and Expected Results:Check Pet ID value is \"+JSON.parse(request.data).petId,function(){\r",
									"//     pm.expect(JSON.parse(request.data).petId).to.be.equal(JSON.parse(responseBody).petId);\r",
									"// });\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC21]-Actual and Expected Results:Check Quantity value is \"+JSON.parse(request.data).quantity,function(){\r",
									"    pm.expect(JSON.parse(request.data).quantity).to.be.equal(JSON.parse(responseBody).quantity);\r",
									"});\r",
									"function formatDateTime(dtStr) {\r",
									"  const dt = new Date(dtStr);\r",
									"  return dt.toISOString().substring(0, 10) + 'T00:00:00';\r",
									"}\r",
									"\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC22]-Actual and Expected Results:Check shipDate value is \"+formatDateTime(JSON.parse(request.data).shipDate),function(){\r",
									"    pm.expect(formatDateTime(JSON.parse(request.data).shipDate)).to.be.equal(formatDateTime(JSON.parse(responseBody).shipDate));\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC23]-Actual and Expected Results:Check status value is \"+JSON.parse(request.data).status,function(){\r",
									"    pm.expect(JSON.parse(request.data).status).to.be.equal(JSON.parse(responseBody).status);\r",
									"});\r",
									"pm.test(\"[2-store].[2.1 Place order for a pet].[TC24]-Actual and Expected Results:Check complete value is \"+JSON.parse(request.data).complete,function(){\r",
									"    pm.expect(JSON.parse(request.data).complete).to.be.equal(JSON.parse(responseBody).complete);\r",
									"});\r",
									"///////////////////check content is number or letters/////////////////////\r",
									"\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.1 Place order for a pet][TC25]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"//Check PET ID is includes numbers only\r",
									"pm.test(\"[2.Store][2.1 Place order for a pet][TC26]-Check petId is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.match(/^\\d+$/)\r",
									"});\r",
									"//Check quantity is includes numbers only\r",
									"pm.test(\"[2.Store][2.1 Place order for a pet][TC27]-Check quantity is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.match(/^\\d+$/)\r",
									"});\r",
									"//Check status is includes letters only\r",
									"pm.test(\"[2.Store][2.1 Place order for a pet][TC28]- Check status is includes Letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//Check status is includes one of these below\r",
									"pm.test(\"[2.Store][2.1 Place order for a pet][TC29]- Check status value\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.be.oneOf([\"placed\", \"completed\", \"inprogress\"])\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"////////////Generate random ID length/////////////////////\r",
									"function generateRandomId(length) {\r",
									"  const characters = '1234567890';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    randomId += characters.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"\r",
									"// Example: Generate a random ID with a length of 8\r",
									"const orderId = generateRandomId(8);\r",
									"  pm.collectionVariables.set('orderId', orderId);\r",
									"console.log(\"Generated orderId:\" , orderId);\r",
									"\r",
									"/////////Generate Pet ID//////////////////////\r",
									"const petId=generateRandomId(8);\r",
									"  pm.collectionVariables.set('petId', petId);\r",
									"console.log(\"Generated petId:\" , petId);\r",
									"\r",
									"//////Random Function to have min and max numbers////////////\r",
									"function getRandomNumber(min, max) {\r",
									"  // Use Math.floor to round down to the nearest integer\r",
									"  return Math.floor(Math.random() * (max - min + 1)) + min;\r",
									"}\r",
									"\r",
									"// Example: Generate a random number between 1 and 100\r",
									"const quantity = getRandomNumber(1, 100);\r",
									"  pm.collectionVariables.set('quantity', quantity);\r",
									"\r",
									"console.log(\"Generated Quantity:\" , quantity);\r",
									"\r",
									"//////////////////////////////// Generate a random Date //////////////////////////////////////\r",
									"function getRandomDate() {\r",
									"  // Set the date range (adjust as needed)\r",
									"  const startDate = new Date(2023, 0, 1); // January 1, 2023\r",
									"  const endDate = new Date(2023, 11, 31); // December 31, 2023\r",
									"\r",
									"  // Generate a random timestamp within the date range\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Create a new Date object using the random timestamp\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date as per the specified format\r",
									"  const formattedDate = randomDate.toISOString().replace(/\\.\\d+/, \"\") + \"+0200\";\r",
									"\r",
									"  return formattedDate;\r",
									"}\r",
									"\r",
									"const randomDate = getRandomDate();\r",
									"pm.collectionVariables.set(\"shipDate\",randomDate)\r",
									"console.log(\"Generated Ship Date:\",randomDate);\r",
									"\r",
									"///////////////////Generate a random status/////////////////\r",
									"\r",
									"//Random selection for compelte Status////////////////////////\r",
									"const stringArray = [\"true\", \"false\"];\r",
									"const randomIndex = Math.floor(Math.random() * stringArray.length);\r",
									"pm.collectionVariables.set(\"completeStatus\",stringArray[randomIndex]);\r",
									"\r",
									"//Random selection for complete Status\r",
									"const arr = [\"placed\", \"completed\",\"inprogress\"];\r",
									"const index = Math.floor(Math.random() * arr.length);\r",
									"pm.collectionVariables.set(\"statusType\",arr[index]);\r",
									"\r",
									"\r",
									"// function generateRandomStatus() {\r",
									"//   // Generate a random number (0 or 1)\r",
									"//   const randomIndex = Math.floor(Math.random() * 2);\r",
									"\r",
									"//   // Set 'statusType' to 'available' if randomIndex is 0, otherwise set it to 'unavailable'\r",
									"//   const statusType = (randomIndex === 0) ? 'placed' : 'unPlaced';\r",
									"\r",
									"// }\r",
									"// // Set the 'statusType' variable in the collection\r",
									"// const status=generateRandomStatus();\r",
									"//   pm.collectionVariables.set('statusType',status);\r",
									"//   console.log('Generated status:', status);\r",
									"\r",
									"/////////////////////////////Generate a random complete Status///////////////////////////////////\r",
									"// function generateRandomCompleteStatus() {\r",
									"//   // Generate a random number (0 or 1)\r",
									"//   const randomIndex = Math.floor(Math.random() * 2);\r",
									"\r",
									"//   // Set 'completeStatus' to 'true' if randomIndex is 0, otherwise set it to 'false'\r",
									"//   const completeStatus = (randomIndex === 0) ? 'true' : 'false';\r",
									"\r",
									"//   // Set the 'completeStatus' variable in the collection\r",
									"//   pm.collectionVariables.set('completeStatus', completeStatus);\r",
									"//   // Set the status in the request body\r",
									"\r",
									"//   console.log('Generated completeStatus:', storedCompleteStatus);\r",
									"// }\r",
									"\r",
									"// // Call the function to generate and set the random completeStatus\r",
									"// generateRandomCompleteStatus();\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{orderId}}\",\r\n  \"petId\": {{petId}},\r\n  \"quantity\": {{quantity}},\r\n  \"shipDate\": \"{{shippingDate}}\",\r\n  \"status\": \"{{statusType}}\",\r\n  \"complete\":{{completeStatus}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/store/order",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.2 Get Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"\r",
									"//check response body contain id \r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC3]- Check ID is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC5]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"pm.test(\"[2-store].[2.2 Get Order By ID].[TC6]-Check if PathOrderID is the same in the Response\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.eql(Number(pm.collectionVariables.get('orderId')));\r",
									"        console.log((JSON.parse(responseBody).id),(Number(pm.collectionVariables.get('orderId'))));\r",
									"\r",
									"});\r",
									"\r",
									"///////////////////////////////////TCS for PET ID//////////////////\r",
									"//check response body contain id \r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC7]- Check respose schema contain petId property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"petId\")\r",
									"});\r",
									"//check id is not null\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC8]- Check petId is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC9]- Check petId is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).petId).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC10]-Check petId is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.match(/^\\d+$/)\r",
									"});\r",
									"pm.test(\"[2-store].[2.2 Get Order By ID].[TC11]-Check if petId saved is the same in the Response\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).petId).to.eql(Number(pm.collectionVariables.get('petId')));\r",
									"            console.log((JSON.parse(responseBody).petId),Number(pm.collectionVariables.get('petId')));\r",
									"\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for quantity  *****************************************\r",
									"\r",
									"//check response body contain quantity \r",
									"pm.test(\"[2.Store]2.2 Get Order by ID][TC12]- Check respose schema contain quantity property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"quantity\")\r",
									"});\r",
									"//check quantity is not null\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC13]- Check quantity is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.not.equal(undefined)\r",
									"});\r",
									"//check quantity value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC14]- Check quantity is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).quantity).to.be.equal('number')\r",
									"});\r",
									"\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC15]-Check quantity is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"[2-store].[2.2 Get Order By ID].[TC16]-Check if quantity saved is the same in the Response\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).quantity).to.be.equal(Number(pm.collectionVariables.get(\"quantity\")));\r",
									"    console.log(Number(pm.collectionVariables.get(\"quantity\")),(JSON.parse(responseBody).quantity));\r",
									"});\r",
									"\r",
									"\r",
									"///////////////////////////TCS for ShipeDate////////////////////\r",
									"\r",
									"\r",
									"//check response body contain shipDate \r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC17]- Check respose schema contain complete property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"shipDate\")\r",
									"});\r",
									"//check shipDate is not null\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC18]- Check shipDate is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).shipDate).to.not.equal(undefined)\r",
									"});\r",
									"// function formatDateTime(dtStr) {\r",
									"//   const dt = new Date(dtStr);\r",
									"//   return dt.toISOString().substring(0, 10) + 'T00:00:00';\r",
									"// }\r",
									"// pm.test(\"[2-store].[2.1 Place order for a pet].[TC19]-Actual and Expected Results:Check shipDate value is \"+formatDateTime(pm.collectionVariables.get(\"shipDate\")),function(){\r",
									"//     pm.expect(formatDateTime(pm.collectionVariables.get(\"shipDate\"))).to.be.equal(formatDateTime(JSON.parse(responseBody).shipDate));\r",
									"// });\r",
									"\r",
									"// ****************************************** TCS for status  *****************************************\r",
									"\r",
									"//check response body contain status \r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC20]- Check respose schema contain status property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"status\")\r",
									"});\r",
									"//check status is not null\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC21]- Check status is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).status).to.not.equal(undefined)\r",
									"});\r",
									"//check status value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC22]- Check status is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).status).to.be.equal('string')\r",
									"});\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.1AddPetOrder][TC23]- Check status is includes Letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.2 Get Order by ID][TC24]- Check status value\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status.toString()).to.be.oneOf([\"placed\", \"completed\", \"inprogress\"])\r",
									"});\r",
									"pm.test(\"[2-store].[2.2 Get Order By ID].[TC25]-Check if status saved is the same in the Response\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).status).to.be.equal(pm.collectionVariables.get(\"statusType\"));\r",
									"    console.log(pm.collectionVariables.get(\"statusType\"),((JSON.parse(responseBody).status)));\r",
									"});\r",
									"\r",
									"\r",
									"//////////////////////////////////TCs for Complete Status///////////////\r",
									"\r",
									"//check response body contain status \r",
									"pm.test(\"[2.Store][2.2 Get Order By ID].[TC26]- Check respose schema contain completeStatus property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"complete\")\r",
									"});\r",
									"//check status is not null\r",
									"pm.test(\"[2.Store][2.2 Get Order By ID].[TC27]- Check completeStatus is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.not.equal(undefined)\r",
									"});\r",
									"//check status value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.2 Get Order By ID].[TC28]- Check completeStatus is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).complete).to.be.equal('boolean')\r",
									"});\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.2 Get Order By ID].[TC29]- Check completeStatus is includes Letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//Check status is includes numbers only\r",
									"pm.test(\"[2.Store][2.2 Get Order By ID].[TC30]- Check completeStatus value\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).complete).to.be.oneOf([true, false]);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"[2-store].[2.2 Get Order By ID].[TC31]-Check if CompleteStatus saved is the same in the Response\", function () {\r",
									"    const responseCompleteStatus = JSON.parse(responseBody).complete;\r",
									"    const collectionCompleteStatus = JSON.parse(pm.collectionVariables.get(\"completeStatus\"));\r",
									"\r",
									"    pm.expect(responseCompleteStatus).to.equal(collectionCompleteStatus);\r",
									"\r",
									"    // Log the values for debugging or verification\r",
									"    console.log(responseCompleteStatus, collectionCompleteStatus);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{orderId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.3 Delete Order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID].[TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/////////////////////Testcases for code/////////////////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID].[TC5]-Check if code field is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.eql(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//////////////Test cases for Type Field/////////////////////////////////\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"////////////////////Test cases for message Field/////////////\r",
									"//check response body contain message property \r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[2.Store][2.3 Delete Order by ID][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[2-store].[2.3 Delete Order By ID].[]TC16]-Check if Message field has the same Order ID to be deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.eql(pm.collectionVariables.get('orderId'));\r",
									"        console.log((JSON.parse(responseBody).message),(pm.collectionVariables.get('orderId')));\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{orderId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.4 Get Order by ID after Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete]-[TC1]-Status code is 404 as user is not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"////////Testcases for code//////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete].[TC5]-Check if message field has code 1\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(1);\r",
									"        console.log((JSON.parse(responseBody).code),(1));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete]TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//////////////////Testcases for Type////////////////////\r",
									"//(check response body contain type property \r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete].[TC11]-Check if message field has type error when user is deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.be.equal(\"error\");\r",
									"        console.log((JSON.parse(responseBody).type),(\"error\"));\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//////////////////////Test Cases for Message////////////////////\r",
									"//check response body contain message property \r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[2-Store].[2.4 Get Order by ID after Delete][TC16]-Check if message field has User not Found when User is deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.be.equal(\"Order not found\");\r",
									"        console.log((JSON.parse(responseBody).message),(\"Order not found\"));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/store/order/{{orderId}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"order",
								"{{orderId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2.5 PetInventories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// /////////////////////////////// TCS for sold  ////////////////////////////////\r",
									"\r",
									"//check response body contain sold property\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC2]- Check respose schema contain sold property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"sold\")\r",
									"});\r",
									"//check sold is not null\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC3]- Check sold is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.not.equal(undefined)\r",
									"});\r",
									"//check id sold is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).sold).to.be.equal('number')\r",
									"});\r",
									"//Check sold value to be from (0 -10) \r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC5]-Check id value to be less than 10 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.be.within(1, 100)\r",
									"\r",
									"});\r",
									"//Check id length is less than 2 digit\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC6]-Check petId length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).sold).toString().length).to.be.lessThan(3)\r",
									"});\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC7]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).sold).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"///////////////////////////////// TCS for string  ////////////////////////////////////\r",
									"\r",
									"//check response body contain string property\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC8]- Check respose schema contain string property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"string\")\r",
									"});\r",
									"//check string is not null\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC9]- Check string is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).string).to.not.equal(undefined)\r",
									"});\r",
									"//check id string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC10]- Check string is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).string).to.be.equal('number')\r",
									"});\r",
									"//Check string length is less than 3 digit\r",
									"pm.test(\"[2.Store][2.12 PetInventories][TC11]-Check string length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).string).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check string is includes numbers only\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC12]-Check string is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).string).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"// ////////////////////////////////// TCS for pending  //////////////////////////////\r",
									"\r",
									"//check response body contain pending property\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC13]- Check  schema contain pending property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"pending\")\r",
									"});\r",
									"//check pending is not null\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC14]- Check pending is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.not.equal(undefined)\r",
									"});\r",
									"//check pending string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC15]- Check pending is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).pending).to.be.equal('number')\r",
									"});\r",
									"//Check pending length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC16]-Check pending length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).pending).toString().length).to.be.lessThan(3)\r",
									"});\r",
									"//Check pending is includes numbers only\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC17]-Check pending is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).pending).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"// //////////////////////////////// TCS for available  //////////////////////////\r",
									"\r",
									"//check response body contain available property\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC18]- Check  schema contain available property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"available\")\r",
									"});\r",
									"//check available is not null\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC19]- Check available is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).available).to.not.equal(undefined)\r",
									"});\r",
									"//check available string is integer/number (data type)\r",
									"pm.test(\"[2.Store][2.3PetInventories][TC20]- Check available is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).available).to.be.equal('number')\r",
									"});\r",
									"//Check unavailable length is less than 4 digit\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC21]-Check available length is less than 3 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).available).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check available is includes numbers only\r",
									"pm.test(\"[2.Store][2.5 PetInventories][TC22]-Check available is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).available).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"\r",
									"/////////////////////////////// TCS for INVALID  /////////////////////////////////\r",
									"\r",
									"// //check response body contain pending property\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC28]- Check  schema contain Invalid property\", function () {\r",
									"//     pm.expect(JSON.parse(responseBody)).to.have.property(\"invalid\")\r",
									"// });\r",
									"// //check invalid is not null\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC29]- Check Invalid is not null\", function () {\r",
									"//     pm.expect(JSON.parse(responseBody).invalid).to.not.equal(null)\r",
									"//     pm.expect(JSON.parse(responseBody).invalid).to.not.equal(undefined)\r",
									"// });\r",
									"// //check invalid string is integer/number (data type)\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC30]- Check Invalid is number/data type \", function () {\r",
									"//     pm.expect(typeof JSON.parse(responseBody).invalid).to.be.equal('number')\r",
									"// });\r",
									"// //Check invalid length is less than 4 digit\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC31]-Check Invalid length is less than 3 digits \", function () {\r",
									"//     pm.expect((JSON.parse(responseBody).invalid).toString().length).to.be.lessThan(4)\r",
									"// });\r",
									"// //Check invalid is includes numbers only\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC32]-Check Invalid is includes numbers only\", function () {\r",
									"//     pm.expect(JSON.parse(responseBody).invalid).to.match(/^\\d+$/)\r",
									"// });\r",
									"// // ///////////////////////////TCS for NONE  ////////////////////////////\r",
									"\r",
									"// //check response body contain NONE property\r",
									"// pm.test(\"[2.Store][2.3PetInventories][TC23]- Check None schema contain string property\", function () {\r",
									"//     pm.expect(JSON.parse(responseBody)).to.have.property(\"none\")\r",
									"// });\r",
									"// //check NONE is not null\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC24]- Check None is not null\", function () {\r",
									"//     pm.expect(JSON.parse(responseBody).none).to.not.equal(null)\r",
									"//     pm.expect(JSON.parse(responseBody).none).to.not.equal(undefined)\r",
									"// });\r",
									"// //check NONE string is integer/number (data type)\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC25]- Check None is number/data type \", function () {\r",
									"//     pm.expect(typeof JSON.parse(responseBody).none).to.be.equal('number')\r",
									"// });\r",
									"// //Check NONE length is less than 4 digit\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC26]-Check None length is less than 3 digits \", function () {\r",
									"//     pm.expect((JSON.parse(responseBody).none).toString().length).to.be.lessThan(4)\r",
									"// });\r",
									"// //Check NONE is includes numbers only\r",
									"// pm.test(\"[2.Store][2.5 PetInventories][TC27]-Check None is includes numbers only\", function () {\r",
									"//     pm.expect(JSON.parse(responseBody).none).to.match(/^\\d+$/)\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/store/inventory",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"store",
								"inventory"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "3. User",
			"item": [
				{
					"name": "3.1CreateUserArr",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"// Example: Get a random email\r",
									"const randomEmail = generateRandomEmail();\r",
									"  pm.collectionVariables.set('randomEmail', randomEmail);\r",
									"console.log('Random Email:', randomEmail);\r",
									"\r",
									"\r",
									"\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const prefixes = ['011', '012', '010'];\r",
									"  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"\r",
									"  const randomNumber = Math.floor(10000000 + Math.random() * 90000000);\r",
									"\r",
									"  return randomPrefix + randomNumber;\r",
									"}\r",
									"\r",
									"// Example: Get a random Egyptian mobile number\r",
									"const randomMobileNumber = generateRandomEgyptianMobileNumber();\r",
									"  pm.collectionVariables.set('randomMobileNumber', randomMobileNumber);\r",
									"console.log('Random Egyptian Mobile Number:', randomMobileNumber);\r",
									"\r",
									"function generateRandomId(length) {\r",
									"  const characters = '1234567890';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    randomId += characters.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"\r",
									"// Example: Generate a random ID with a length of 8\r",
									"const userID = generateRandomId(8);\r",
									"  pm.collectionVariables.set('userID', userID);\r",
									"console.log(\"Generated userID:\" , userID);\r",
									"\r",
									"////////////////random status 0 or 1////////////////////\r",
									"function generateRandomStatus() {\r",
									"  return Math.round(Math.random()); // Will return either 0 or 1\r",
									"}\r",
									"\r",
									"// Example: Get a random status\r",
									"const randomStatus = generateRandomStatus();\r",
									"pm.collectionVariables.set(\"randomStatus\",randomStatus);\r",
									"console.log('Random Status:', randomStatus);\r",
									"//////////////////random firstname,lastname,username////////////\r",
									"function generateRandomUsername() {\r",
									"  const firstNames = ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Frank', 'Grace', 'Henry'];\r",
									"  const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller'];\r",
									"\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  pm.collectionVariables.set(\"randomFirstName\",randomFirstName);\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"pm.collectionVariables.set(\"randomLastName\",randomLastName);\r",
									"  return `${randomFirstName.toLowerCase()} ${randomLastName.toLowerCase()}`;\r",
									"}\r",
									"\r",
									"// Example: Get a random username\r",
									"const randomUsername = generateRandomUsername();\r",
									"pm.collectionVariables.set(\"randomUsername\",randomUsername);\r",
									"console.log('Random Username:', randomUsername);\r",
									"/////////////////random password//////////////\r",
									"function generateRandomPassword(length) {\r",
									"  const specialCharacters = '!@#$%^&*()_-+=<>?';\r",
									"  const allCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' + specialCharacters;\r",
									"\r",
									"  if (length < 8) {\r",
									"    throw new Error('Password length must be at least 8 characters.');\r",
									"  }\r",
									"\r",
									"  let password = '';\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    if (i === 0) {\r",
									"      // First character should not be a special character\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * (allCharacters.length - specialCharacters.length)));\r",
									"    } else {\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * allCharacters.length));\r",
									"    }\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"\r",
									"// Example: Get a random password with a length not less than 8\r",
									"const randomPassword = generateRandomPassword(12); // You can adjust the length as needed\r",
									"pm.environment.set(\"password\",randomPassword);\r",
									"console.log('Random Password:', randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][23.1CreateUserArr][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][2.3.1CreateUserArr][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"        console.log((JSON.parse(responseBody).type),(\"unknown\"));\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal('ok')\r",
									"        console.log((JSON.parse(responseBody).message),\"ok\");\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[3.User][3.1CreateUserArr[TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\":{{userID}},\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"firstName\": \"{{randomFirstName}}\",\r\n    \"lastName\": \"{{randomLastName}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{randomMobileNumber}}\",\r\n    \"userStatus\": {{randomStatus}}\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/createWithArray",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithArray"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.2 CreateUserList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"// Example: Get a random email\r",
									"const randomEmail = generateRandomEmail();\r",
									"  pm.collectionVariables.set('randomEmail', randomEmail);\r",
									"console.log('Random Email:', randomEmail);\r",
									"\r",
									"\r",
									"\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const prefixes = ['011', '012', '010'];\r",
									"  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"\r",
									"  const randomNumber = Math.floor(10000000 + Math.random() * 90000000);\r",
									"\r",
									"  return randomPrefix + randomNumber;\r",
									"}\r",
									"\r",
									"// Example: Get a random Egyptian mobile number\r",
									"const randomMobileNumber = generateRandomEgyptianMobileNumber();\r",
									"  pm.collectionVariables.set('randomMobileNumber', randomMobileNumber);\r",
									"console.log('Random Egyptian Mobile Number:', randomMobileNumber);\r",
									"\r",
									"function generateRandomId(length) {\r",
									"  const characters = '1234567890';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    randomId += characters.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"\r",
									"// Example: Generate a random ID with a length of 8\r",
									"const userID = generateRandomId(8);\r",
									"  pm.collectionVariables.set('userID', userID);\r",
									"console.log(\"Generated userID:\" , userID);\r",
									"\r",
									"////////////////random status 0 or 1////////////////////\r",
									"function generateRandomStatus() {\r",
									"  return Math.round(Math.random()); // Will return either 0 or 1\r",
									"}\r",
									"\r",
									"// Example: Get a random status\r",
									"const randomStatus = generateRandomStatus();\r",
									"pm.collectionVariables.set(\"randomStatus\",randomStatus);\r",
									"console.log('Random Status:', randomStatus);\r",
									"//////////////////random firstname,lastname,username////////////\r",
									"function generateRandomUsername() {\r",
									"  const firstNames = ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Frank', 'Grace', 'Henry'];\r",
									"  const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller'];\r",
									"\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  pm.collectionVariables.set(\"randomFirstName\",randomFirstName);\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"pm.collectionVariables.set(\"randomLastName\",randomLastName);\r",
									"  return `${randomFirstName.toLowerCase()} ${randomLastName.toLowerCase()}`;\r",
									"}\r",
									"\r",
									"// Example: Get a random username\r",
									"const randomUsername = generateRandomUsername();\r",
									"pm.collectionVariables.set(\"randomUsername\",randomUsername);\r",
									"console.log('Random Username:', randomUsername);\r",
									"/////////////////random password//////////////\r",
									"function generateRandomPassword(length) {\r",
									"  const specialCharacters = '!@#$%^&*()_-+=<>?';\r",
									"  const allCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' + specialCharacters;\r",
									"\r",
									"  if (length < 8) {\r",
									"    throw new Error('Password length must be at least 8 characters.');\r",
									"  }\r",
									"\r",
									"  let password = '';\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    if (i === 0) {\r",
									"      // First character should not be a special character\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * (allCharacters.length - specialCharacters.length)));\r",
									"    } else {\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * allCharacters.length));\r",
									"    }\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"\r",
									"// Example: Get a random password with a length not less than 8\r",
									"const randomPassword = generateRandomPassword(12); // You can adjust the length as needed\r",
									"pm.environment.set(\"password\",randomPassword);\r",
									"console.log('Random Password:', randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.2 CreateUserList[TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//=================================================================================================\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal('ok')\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[3.User][3.2 CreateUserList][TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\":{{userID}},\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"firstName\": \"{{randomFirstName}}\",\r\n    \"lastName\": \"{{randomLastName}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{randomMobileNumber}}\",\r\n    \"userStatus\": {{randomStatus}}\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/createWithList",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"createWithList"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.10 CreateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"// Example: Get a random email\r",
									"const randomEmail = generateRandomEmail();\r",
									"  pm.collectionVariables.set('randomEmail', randomEmail);\r",
									"console.log('Random Email:', randomEmail);\r",
									"\r",
									"\r",
									"\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const prefixes = ['011', '012', '010'];\r",
									"  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"\r",
									"  const randomNumber = Math.floor(10000000 + Math.random() * 90000000);\r",
									"\r",
									"  return randomPrefix + randomNumber;\r",
									"}\r",
									"\r",
									"// Example: Get a random Egyptian mobile number\r",
									"const randomMobileNumber = generateRandomEgyptianMobileNumber();\r",
									"  pm.collectionVariables.set('randomMobileNumber', randomMobileNumber);\r",
									"console.log('Random Egyptian Mobile Number:', randomMobileNumber);\r",
									"\r",
									"function generateRandomId(length) {\r",
									"  const characters = '1234567890';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    randomId += characters.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"\r",
									"// Example: Generate a random ID with a length of 8\r",
									"const userID = generateRandomId(8);\r",
									"  pm.collectionVariables.set('userID', userID);\r",
									"console.log(\"Generated userID:\" , userID);\r",
									"\r",
									"////////////////random status 0 or 1////////////////////\r",
									"function generateRandomStatus() {\r",
									"  return Math.round(Math.random()); // Will return either 0 or 1\r",
									"}\r",
									"\r",
									"// Example: Get a random status\r",
									"const randomStatus = generateRandomStatus();\r",
									"pm.collectionVariables.set(\"randomStatus\",randomStatus);\r",
									"console.log('Random Status:', randomStatus);\r",
									"//////////////////random firstname,lastname,username////////////\r",
									"function generateRandomUsername() {\r",
									"  const firstNames = ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Frank', 'Grace', 'Henry'];\r",
									"  const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller'];\r",
									"\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  pm.collectionVariables.set(\"randomFirstName\",randomFirstName);\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"pm.collectionVariables.set(\"randomLastName\",randomLastName);\r",
									"  return `${randomFirstName.toLowerCase()} ${randomLastName.toLowerCase()}`;\r",
									"}\r",
									"\r",
									"// Example: Get a random username\r",
									"const randomUsername = generateRandomUsername();\r",
									"pm.collectionVariables.set(\"randomUsername\",randomUsername);\r",
									"console.log('Random Username:', randomUsername);\r",
									"/////////////////random password//////////////\r",
									"function generateRandomPassword(length) {\r",
									"  const specialCharacters = '!@#$%^&*()_-+=<>?';\r",
									"  const allCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' + specialCharacters;\r",
									"\r",
									"  if (length < 8) {\r",
									"    throw new Error('Password length must be at least 8 characters.');\r",
									"  }\r",
									"\r",
									"  let password = '';\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    if (i === 0) {\r",
									"      // First character should not be a special character\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * (allCharacters.length - specialCharacters.length)));\r",
									"    } else {\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * allCharacters.length));\r",
									"    }\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"\r",
									"// Example: Get a random password with a length not less than 8\r",
									"const randomPassword = generateRandomPassword(12); // You can adjust the length as needed\r",
									"pm.environment.set(\"password\",randomPassword);\r",
									"console.log('Random Password:', randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//check status code is 200\r",
									"pm.test(\"[3.User][3.10CreateUser][TC1]- Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ****************************************** TCS for code  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.10CreateUser][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.10CreateUser][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.10CreateUser][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.10CreateUser][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.10CreateUser][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"// ****************************************** TCS for type  *****************************************\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.10CreateUser][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.10CreateUser][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][3.10CreateUser][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][3.10CreateUser][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"        console.log((JSON.parse(responseBody).type),(\"unknown\"));\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.10CreateUser][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"// ****************************************** TCS for message  *****************************************\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.1CreateUserArr][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.10CreateUser][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][3.10CreateUser][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][3.10CreateUser][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get(\"userID\"))\r",
									"        console.log((JSON.parse(responseBody).message),(pm.collectionVariables.get(\"userID\")));\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n    \"id\":{{userID}},\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"firstName\": \"{{randomFirstName}}\",\r\n    \"lastName\": \"{{randomLastName}}\",\r\n    \"email\": \"{{randomEmail}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"phone\": \"{{randomMobileNumber}}\",\r\n    \"userStatus\": {{randomStatus}}\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.3 Get User by Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// testcases\r",
									"// 1- check status code is 200\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// 2- check response schema //////////////////////\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC2]-Check Response include User ID property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC3]-Check Response include UserName property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC4]-Check Response include firstName property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstName\")\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC5]-Check Response include lastName property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastName\")\r",
									"});\r",
									"  pm.test(\"[3-User].[3.3 Get User by Username][TC6]-Check Response include email property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC7]-Check Response include password property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"});\r",
									" pm.test(\"[3-User].[3.3 Get User by Username][TC8]-Check Response include phone property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"phone\")\r",
									"});\r",
									" pm.test(\"[3-User].[3.3 Get User by Username][TC9]-Check Response include userStatus property\",function(){\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userStatus\")\r",
									"});\r",
									"\r",
									"////////////3-check values are not null or undefined////////////////////////////////////\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC10]-Check ID isnot null: \"+JSON.parse(responseBody).id,function(){\r",
									"     pm.expect(JSON.parse(responseBody).id).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC11]-Check username isnot null: \"+JSON.parse(responseBody).username,function(){\r",
									"     pm.expect(JSON.parse(responseBody).username).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).username).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC12]-Check firstName isnot null: \"+JSON.parse(responseBody).firstName,function(){\r",
									"     pm.expect(JSON.parse(responseBody).firstName).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).firstName).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC13]-Check lastName isnot null: \"+JSON.parse(responseBody).lastName,function(){\r",
									"     pm.expect(JSON.parse(responseBody).lastName).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).lastName).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC14]-Check email isnot null: \"+JSON.parse(responseBody).email,function(){\r",
									"     pm.expect(JSON.parse(responseBody).email).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).email).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC15]-Check password isnot null: \"+JSON.parse(responseBody).password,function(){\r",
									"     pm.expect(JSON.parse(responseBody).password).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).password).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC16]-Check phone isnot null: \"+JSON.parse(responseBody).phone,function(){\r",
									"     pm.expect(JSON.parse(responseBody).phone).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).phone).to.not.equal(undefined);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC17]-Check userStatus isnot null: \"+JSON.parse(responseBody).userStatus,function(){\r",
									"     pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(null);\r",
									"     pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(undefined);\r",
									"});\r",
									"//////////////4-check Data Type Validation//////////////////////////////\r",
									"// Test for Data Type Validation\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC18]-Data Type Validation: userID should be an integer\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).id).to.be.equal(\"number\");\r",
									"      //pm.expect(JSON.parse(responseBody).id).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC19]-Data Type Validation: username should be an String\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).username).to.be.equal(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC20]-Data Type Validation: firstName should be a String\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).firstName).to.be.equal(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC21]-Data Type Validation: lastName should be a String\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).lastName).to.be.equal(\"string\");\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC22]-Data Type Validation: email should be a String\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).email).to.be.equal(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].23-Data Type Validation: password should be a String\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).password).to.be.equal(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC24]-Data Type Validation: phone should be a String\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).phone).to.be.equal(\"string\");\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC25]-Data Type Validation: userStatus should be a Number\", function () {\r",
									"  pm.expect(typeof JSON.parse(responseBody).userStatus).to.be.equal(\"number\");\r",
									"});\r",
									"\r",
									"/////////////////////////5-check Actual with Expected////////////////////////////////////////////////\r",
									"\r",
									"//Check code value as expected\r",
									"pm.test(\"[3.User][3.3 Get User by Username][TC26]-Check id value in responce is correct\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id.toString()).to.be.equal(pm.collectionVariables.get('userID'))\r",
									"        console.log((JSON.parse(responseBody).id.toString()).message),(pm.collectionVariables.get('userID'));\r",
									"});\r",
									"//Check username value as expected\r",
									"pm.test(\"[3.User][3.3 Get User by Username][TC27]- Check username value in responce is correct \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.be.equal(pm.collectionVariables.get('randomUsername'))\r",
									"\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC28]-Check correct Firstname\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.be.equal(pm.collectionVariables.get('randomFirstName'));\r",
									"        console.log((JSON.parse(responseBody).firstName),(pm.collectionVariables.get('randomFirstName')));\r",
									"\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC28]-Check correct Lastname\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.be.equal(pm.collectionVariables.get('randomLastName'));\r",
									"        console.log((JSON.parse(responseBody).lastName),(pm.collectionVariables.get('randomLastName')));\r",
									"\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC29]-Check if the response email is the same in collection\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.eql(pm.collectionVariables.get('randomEmail'));\r",
									"        console.log((JSON.parse(responseBody).email),(pm.collectionVariables.get('randomEmail')));\r",
									"\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username]][TC30]-Check if the response password is the same in collection\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.be.equal(pm.environment.get('password'));\r",
									"        console.log((JSON.parse(responseBody).password),(pm.environment.get('password')));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.3 Get User by Username].[TC31]-Actual and Expected Results:Check Pet ID value is \"+pm.collectionVariables.get(\"randomUsername\"),function(){\r",
									"    pm.expect(pm.collectionVariables.get(\"randomUsername\")).to.be.equal(JSON.parse(responseBody).username);\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username]][TC32]-Check phone  value is response is correct\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.be.equal(pm.collectionVariables.get('randomMobileNumber'));\r",
									"        console.log((JSON.parse(responseBody).phone),(pm.collectionVariables.get('randomMobileNumber')));\r",
									"\r",
									"});\r",
									"pm.test(\"[3-User].[3.3 Get User by Username][TC33]-Check Status  value is response is correct\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.be.equal(pm.collectionVariables.get('randomStatus'));\r",
									"        console.log((JSON.parse(responseBody).userStatus),(pm.collectionVariables.get('randomStatus')));\r",
									"\r",
									"});\r",
									"/////////////////////check id to be just number/////////////////////\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[3.User][3.3 Get User by Username][TC34]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"////////////////////check names to be just letters///////////\r",
									"//Check firstName is includes letters only\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC19]- Check firstName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//Check lastName is includes letters only\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC19]- Check lastName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.match(/^[a-zA-Z]+$/)\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{randomUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{randomUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.4 Update user by username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomEmail() {\r",
									"  const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\r",
									"  const domains = [\r",
									"    'gmail.com',\r",
									"    'yahoo.com',\r",
									"    'hotmail.com',\r",
									"    'outlook.com',\r",
									"    'protonmail.com',\r",
									"    'zoho.com',\r",
									"  ];\r",
									"\r",
									"  const usernameLength = Math.floor(Math.random() * 10) + 5;\r",
									"  const domainIndex = Math.floor(Math.random() * domains.length);\r",
									"\r",
									"  let username = '';\r",
									"  for (let i = 0; i < usernameLength; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * alphabet.length);\r",
									"    username += alphabet[randomIndex];\r",
									"  }\r",
									"\r",
									"  return `${username}@${domains[domainIndex]}`;\r",
									"}\r",
									"let updatedEmail=generateRandomEmail();\r",
									"pm.collectionVariables.set(\"updatedRandomEmail\",updatedEmail);\r",
									"\r",
									"console.log('Random Email:', updatedEmail);\r",
									"\r",
									"///////////////Generate Random Mobile number///////////////////\r",
									"\r",
									"function generateRandomEgyptianMobileNumber() {\r",
									"  const prefixes = ['011', '012', '010'];\r",
									"  const randomPrefix = prefixes[Math.floor(Math.random() * prefixes.length)];\r",
									"\r",
									"  const randomNumber = Math.floor(10000000 + Math.random() * 90000000);\r",
									"\r",
									"  return randomPrefix + randomNumber;\r",
									"}\r",
									"\r",
									"// Example: Get a random Egyptian mobile number\r",
									"const randomMobileNumber = generateRandomEgyptianMobileNumber();\r",
									"  pm.collectionVariables.set('updatedRandomMobileNumber', randomMobileNumber);\r",
									"console.log('Random Egyptian Mobile Number:', randomMobileNumber);\r",
									"\r",
									"function generateRandomId(length) {\r",
									"  const characters = '1234567890';\r",
									"  let randomId = '';\r",
									"\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    const randomIndex = Math.floor(Math.random() * characters.length);\r",
									"    randomId += characters.charAt(randomIndex);\r",
									"  }\r",
									"\r",
									"  return randomId;\r",
									"}\r",
									"\r",
									"// // Example: Generate a random ID with a length of 8\r",
									"// const userID = generateRandomId(8);\r",
									"//   pm.collectionVariables.set('updatedRandomUserID', userID);\r",
									"// console.log(\"Generated userID:\" , userID);\r",
									"\r",
									"////////////////random status 0 or 1////////////////////\r",
									"function generateRandomStatus() {\r",
									"  return Math.round(Math.random()); // Will return either 0 or 1\r",
									"}\r",
									"\r",
									"// Example: Get a random status\r",
									"const randomStatus = generateRandomStatus();\r",
									"pm.collectionVariables.set(\"updatedRandomStatus\",randomStatus);\r",
									"console.log('Random Status:', randomStatus);\r",
									"//////////////////random firstname,lastname,username////////////\r",
									"function generateRandomUsername() {\r",
									"  const firstNames = ['Alice', 'Bob', 'Charlie', 'David', 'Eva', 'Frank', 'Grace', 'Henry'];\r",
									"  const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown', 'Davis', 'Miller'];\r",
									"\r",
									"  const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  pm.collectionVariables.set(\"updatedRandomFirstName\",randomFirstName);\r",
									"  const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"pm.collectionVariables.set(\"updatedRandomLastName\",randomLastName);\r",
									"  return `${randomFirstName.toLowerCase()} ${randomLastName.toLowerCase()}`;\r",
									"}\r",
									"\r",
									"\r",
									"/////////////////random password//////////////\r",
									"function generateRandomPassword(length) {\r",
									"  const specialCharacters = '!@#$%^&*()_-+=<>?';\r",
									"  const allCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789' + specialCharacters;\r",
									"\r",
									"  if (length < 8) {\r",
									"    throw new Error('Password length must be at least 8 characters.');\r",
									"  }\r",
									"\r",
									"  let password = '';\r",
									"  for (let i = 0; i < length; i++) {\r",
									"    if (i === 0) {\r",
									"      // First character should not be a special character\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * (allCharacters.length - specialCharacters.length)));\r",
									"    } else {\r",
									"      password += allCharacters.charAt(Math.floor(Math.random() * allCharacters.length));\r",
									"    }\r",
									"  }\r",
									"\r",
									"  return password;\r",
									"}\r",
									"\r",
									"// Example: Get a random password with a length not less than 8\r",
									"const randomPassword = generateRandomPassword(12); // You can adjust the length as needed\r",
									"pm.environment.set(\"updatedPassword\",randomPassword);\r",
									"console.log('Random Password:', randomPassword);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check Status Code is 200\r",
									"pm.test(\"[3-User][3.4 Update User by Username ].[TC1]-Check if code field is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.eql(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"\r",
									"///////////////////// TCS for code //////////////////////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"//Check code value   is 200  \r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC5]-Check code value is 200 \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200)\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is string/number (data type)\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value on response\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC11]-Check type value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"// ////////////////// TCS for message  ///////////////////////////\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string (data type)\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC15]- Check message is String/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//Check message value on response\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC16]-Check message value on response \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get('userID'))\r",
									"        console.log((JSON.parse(responseBody).message),(pm.collectionVariables.get('userID')));\r",
									"\r",
									"});\r",
									"//Check message is includes letters only\r",
									"pm.test(\"[3.User][3.4 Update User by Username ][TC17]-Check message is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n  {\r\n    \"id\":{{userID}},\r\n    \"username\": \"{{randomUsername}}\",\r\n    \"firstName\": \"{{updatedRandomFirstName}}\",\r\n    \"lastName\": \"{{updatedRandomLastName}}\",\r\n    \"email\": \"{{updatedRandomEmail}}\",\r\n    \"password\": \"{{updatedPassword}}\",\r\n    \"phone\": \"{{updatedRandomMobileNumber}}\",\r\n    \"userStatus\": {{updatedRandomStatus}}\r\n  } \r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/v2/user/{{randomUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{randomUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.5 Get user after update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"///////////////check actual as expected//////////////////////////////\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC1]- Status code is 404\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"// ****************************************** TCS for ID  *****************************************\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC2]- Check respose schema contain id property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"id\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC3]- Check id is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).id).to.not.equal(undefined)\r",
									"});\r",
									"//check id value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.4GetUser][TC4]- Check id is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).id).to.be.equal('number')\r",
									"});\r",
									"//Check code value as expected\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC5]-Check id value in responce is correct\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id.toString()).to.be.equal(pm.collectionVariables.get('userID'))\r",
									"        console.log((JSON.parse(responseBody).id.toString()).message),(pm.collectionVariables.get('userID'));\r",
									"});\r",
									"\r",
									"//Check id is includes numbers only\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC6]-Check id is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).id).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"// ****************************************** TCS for username  *****************************************\r",
									"\r",
									"//(check response body contain username property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC7]- Check respose schema contain username property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"username\")\r",
									"});\r",
									"//check username is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC8]- Check username is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).username).to.not.equal(undefined)\r",
									"});\r",
									"//check username value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC9]- Check username is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).username).to.be.equal('string')\r",
									"});\r",
									"//Check username value as expected\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC10]- Check username value in responce is correct \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).username).to.be.equal(pm.collectionVariables.get('randomUsername'))\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// ****************************************** TCS for firstName  *****************************************\r",
									"\r",
									"//check response body contain firstName property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC11]- Check respose schema contain firstName property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"firstName\")\r",
									"});\r",
									"//check firstName is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC12]- Check firstName is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.not.equal(undefined)\r",
									"});\r",
									"//check firstName value is string/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC13]- Check firstName is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).firstName).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[3-User].[3.5 Get user after Update][TC14]-Check correct Firstname\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.be.equal(pm.collectionVariables.get('updatedRandomFirstName'));\r",
									"        console.log((JSON.parse(responseBody).firstName),(pm.collectionVariables.get('updatedRandomFirstName')));\r",
									"\r",
									"});\r",
									"//Check firstName is includes letters only\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC15]- Check firstName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).firstName).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"// ****************************************** TCS for lastName  *****************************************\r",
									"\r",
									"//check response body contain lastName property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC16]- Check respose schema contain lastName property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"lastName\")\r",
									"});\r",
									"//check lastName is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC17]- Check lastName is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.not.equal(undefined)\r",
									"});\r",
									"//check lastName value is string/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC18]- Check lastName is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).lastName).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[3-User].[3.5 Get user after Update][TC19]-Check correct Last Name\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.be.equal(pm.collectionVariables.get('updatedRandomLastName'));\r",
									"        console.log((JSON.parse(responseBody).lastName),(pm.collectionVariables.get('updatedRandomLastName')));\r",
									"\r",
									"});\r",
									"//Check lastName is includes letters only\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC20]- Check lastName is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).lastName).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"\r",
									"// ****************************************** TCS for email  *****************************************\r",
									"\r",
									"//check response body contain email property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC21]- Check respose schema contain  email\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"email\")\r",
									"});\r",
									"//check email is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC22]- Check email is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).email).to.not.equal(undefined)\r",
									"});\r",
									"//check email value is string/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC23]- Check email is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).email).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[3-User].[3.5 Get user after Update][TC24]-Check if the response email is the same in collection\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).email).to.eql(pm.collectionVariables.get('updatedRandomEmail'));\r",
									"        console.log((JSON.parse(responseBody).email),(pm.collectionVariables.get('updatedRandomEmail')));\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"// ****************************************** TCS for password  *****************************************\r",
									"\r",
									"//check response body contain password property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC25]- Check respose schema contain  password\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"password\")\r",
									"});\r",
									"//check password is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC26]- Check password is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).password).to.not.equal(undefined)\r",
									"});\r",
									"//check password value is string/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC27]- Check password is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).password).to.be.equal('string')\r",
									"});\r",
									"//Check password length is value is response is correct \r",
									"\r",
									"pm.test(\"[3-User].[3.5 Get user after Update][TC28]Check if the response password is the same in collection\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).password).to.be.equal(pm.environment.get('updatedPassword'));\r",
									"        console.log((JSON.parse(responseBody).password),(pm.environment.get('updatedPassword')));\r",
									"\r",
									"});\r",
									"// ****************************************** TCS for phone  *****************************************\r",
									"\r",
									"//check response body contain phone property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC29]- Check respose schema contain  phone\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"phone\")\r",
									"});\r",
									"//check phone is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC30]- Check phone is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.not.equal(undefined)\r",
									"});\r",
									"//check phone value is string/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC31]- Check phone is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).phone).to.be.equal('string')\r",
									"});\r",
									"//Check phone  value in response is correct \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC32]- Check phone  value is response is correct  \", function () {\r",
									"    pm.expect(JSON.parse(responseBody).phone).to.be.equal(pm.collectionVariables.get('updatedRandomMobileNumber'))\r",
									"    console.log((JSON.parse(responseBody).phone),(pm.collectionVariables.get('updatedRandomMobileNumber')));\r",
									"});\r",
									"\r",
									"\r",
									"// ****************************************** TCS for userStatus  *****************************************\r",
									"\r",
									"//check response body contain userStatus property \r",
									"pm.test(\"[3.User][3.5 Get user after update][TC33]- Check respose schema contain  userStatus\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"userStatus\")\r",
									"});\r",
									"//check userStatus is not null\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC34]- Check Status is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.not.equal(undefined)\r",
									"});\r",
									"//check userStatus value is string/number (data type)\r",
									"pm.test(\"[3.User][3.5 Get user after update][TC35]- Check Status is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).userStatus).to.be.equal('number')\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.5 Get user after Update][TC36]-Check Status  value is response is correct\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).userStatus).to.be.equal(pm.collectionVariables.get('updatedRandomStatus'));\r",
									"        console.log((JSON.parse(responseBody).userStatus),(pm.collectionVariables.get('updatedRandomStatus')));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{randomUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{randomUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.6 Delete User by username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"[3.User][3.6 3.6 Delete User by username][TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"/////////////////////Testcases for code/////////////////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3.User][3.6 3.6 Delete User by username][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"pm.test(\"[3-User].[3.6 Delete User By UserName].[TC5]-Check if code field is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.eql(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"//////////////Test cases for Type Field/////////////////////////////////\r",
									"\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"////////////////////Test cases for message Field/////////////\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.6 Delete User by username][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[3-User].[3.6 Delete User by username][TC16]-Check if Message field has the same username to be deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.be.equal(pm.collectionVariables.get('randomUsername'));\r",
									"        console.log((JSON.parse(responseBody).message),(pm.collectionVariables.get('randomUsername')));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{randomUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{randomUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.7 Get user after Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete]-[TC1]-Status code is 404 as user is not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"////////Testcases for code//////////\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete][TC2]- Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\")\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete][TC3]- Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined)\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete][TC4]- Check code is number/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).code).to.be.equal('number')\r",
									"});\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete].[TC5]-Check if message field has code 1\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(1);\r",
									"        console.log((JSON.parse(responseBody).code),(1));\r",
									"\r",
									"});\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete][TC7]-Check code is includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"\r",
									"//////////////////Testcases for Type////////////////////\r",
									"//(check response body contain type property \r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"\r",
									"pm.test(\"[3-User].[3.7 Get User by Username after Delete].[TC11]-Check if message field has type error when user is deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.be.equal(\"error\");\r",
									"        console.log((JSON.parse(responseBody).type),(\"error\"));\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC12]-Check type is includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"//////////////////////Test Cases for Message////////////////////\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.7 Get User by username after Delete][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"pm.test(\"[3-User].[3.7 Get User by username after Delete][TC16]-Check if message field has User not Found when User is deleted\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.be.equal(\"User not found\");\r",
									"        console.log((JSON.parse(responseBody).message),(\"User not found\"));\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/{{randomUsername}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"{{randomUsername}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3.8 User Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"[3-User].[3.8 User Login].[TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"///////////////////////////Test cases For Code Field////////////////\r",
									"\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3-User].[3.8 User Login].[TC2]-Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\");\r",
									"        console.log((JSON.parse(responseBody).code));\r",
									"\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3-User].[3.8 User Login].[TC3]-Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined);\r",
									"        console.log(\"Not null code \",(JSON.parse(responseBody).code));\r",
									"\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3-User].[3.8 User Login].[TC4]-Check code Datatype is Number\", function () {\r",
									"    pm.expect(typeof(JSON.parse(responseBody).code)).to.be.equal(\"number\");\r",
									"});\r",
									"\r",
									"////check code value equals 200///////\r",
									"pm.test(\"[3-User].[3.8 User Login].[TC5]-Check if code value is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.8 User Login][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.8 User Login][TC7]-Check code value includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"    ////////////////////////Testcases for type field////////////////////\r",
									"\r",
									"    //(check response body contain type property \r",
									"pm.test(\"[3.User][3.8 User Login][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.8 User Login][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.8 user Login][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.8 User Login][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.8 User Login][TC12]-Check Type value includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//////////////////// TCS for message  /////////////////////////////////\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.8 User Login][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.8 User Login][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.8 user Login][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//check message value is ok\r",
									"pm.test(\"[3.User][3.8 User Login][TC16]- Check message contains ok  \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.contains(\"user session\")\r",
									"}); \r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.8 User Login][TC17]-Check message value includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/login?username={{randomUsername}}&password={{password}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "{{randomUsername}}"
								},
								{
									"key": "password",
									"value": "{{password}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3.9 User Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"[3-User].[3.9 User Logout].[TC1]-Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"///////////////////////////Test cases For Code Field////////////////\r",
									"\r",
									"\r",
									"//check response body contain code property \r",
									"pm.test(\"[3-User].[3.9 User Logout].[TC2]-Check respose schema contain code property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"code\");\r",
									"        console.log((JSON.parse(responseBody).code));\r",
									"\r",
									"});\r",
									"//check code is not null\r",
									"pm.test(\"[3-User].[3.9 User Logout].[TC3]-Check code is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(null);\r",
									"    pm.expect(JSON.parse(responseBody).code).to.not.equal(undefined);\r",
									"        console.log(\"Not null code \",(JSON.parse(responseBody).code));\r",
									"\r",
									"});\r",
									"//check code value is integer/number (data type)\r",
									"pm.test(\"[3-User].[3.9 User Logout].[TC4]-Check code Datatype is Number\", function () {\r",
									"    pm.expect(typeof(JSON.parse(responseBody).code)).to.be.equal(\"number\");\r",
									"});\r",
									"\r",
									"////check code value equals 200///////\r",
									"pm.test(\"[3-User].[3.9 User Logout].[TC5]-Check if code value is 200\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.be.equal(200);\r",
									"        console.log((JSON.parse(responseBody).code),(200));\r",
									"\r",
									"});\r",
									"\r",
									"//Check code length is less than 4 digit\r",
									"pm.test(\"[3.User][3.9 User Logout][TC6]-Check code length is less than 4 digits \", function () {\r",
									"    pm.expect((JSON.parse(responseBody).code).toString().length).to.be.lessThan(4)\r",
									"});\r",
									"\r",
									"//Check code is includes numbers only\r",
									"pm.test(\"[3.User][3.9 User Logout][TC7]-Check code value includes numbers only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).code).to.match(/^\\d+$/)\r",
									"});\r",
									"    ////////////////////////Testcases for type field////////////////////\r",
									"\r",
									"    //(check response body contain type property \r",
									"pm.test(\"[3.User][3.9 User Logout][TC8]- Check respose schema contain type property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"type\")\r",
									"});\r",
									"//check type is not null\r",
									"pm.test(\"[3.User][3.9 User Logout][TC9]- Check type is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).type).to.not.equal(undefined)\r",
									"});\r",
									"//check type value is stirng/number (data type)\r",
									"pm.test(\"[3.User][3.9 User Logout][TC10]- Check type is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).type).to.be.equal('string')\r",
									"});\r",
									"//Check type value equal to unknown\r",
									"pm.test(\"[3.User][3.9 User Logout][TC11]-Check type value equal to unknown \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).type).to.be.equal('unknown')\r",
									"\r",
									"});\r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.9 User Logout][TC12]-Check Type value includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									"//////////////////// TCS for message  /////////////////////////////////\r",
									"\r",
									"//check response body contain message property \r",
									"pm.test(\"[3.User][3.9 User Logout][TC13]- Check respose schema contain message property\", function () {\r",
									"    pm.expect(JSON.parse(responseBody)).to.have.property(\"message\")\r",
									"});\r",
									"//check message is not null\r",
									"pm.test(\"[3.User][3.9 User Logout][TC14]- Check message is not null\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(null)\r",
									"    pm.expect(JSON.parse(responseBody).message).to.not.equal(undefined)\r",
									"});\r",
									"//check message value is string/number (data type)\r",
									"pm.test(\"[3.User][3.9 User Logout][TC15]- Check message is string/data type \", function () {\r",
									"    pm.expect(typeof JSON.parse(responseBody).message).to.be.equal('string')\r",
									"});\r",
									"//check message value is ok\r",
									"pm.test(\"[3.User][3.9 User Logout][TC16]- Check message contains ok  \", function () {\r",
									"    pm.expect( JSON.parse(responseBody).message).to.be.equal(\"ok\")\r",
									"}); \r",
									"//Check type is includes letters only\r",
									"pm.test(\"[3.User][3.9 User Logout][TC17]-Check message value includes letters only\", function () {\r",
									"    pm.expect(JSON.parse(responseBody).type).to.match(/^[a-zA-Z]+$/)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/v2/user/logout",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"v2",
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "statusType",
			"value": "inprogress"
		},
		{
			"key": "completeStatus",
			"value": "true"
		},
		{
			"key": "orderId",
			"value": "90851532"
		},
		{
			"key": "petId",
			"value": "83410106"
		},
		{
			"key": "shippingDate",
			"value": "2023-11-29T09:42:33.982+0200"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "quantity",
			"value": 5
		},
		{
			"key": "userId",
			"value": "54662769"
		},
		{
			"key": "firstName",
			"value": "Eva"
		},
		{
			"key": "lastName",
			"value": "Smith"
		},
		{
			"key": "userName",
			"value": "Eva Smith"
		},
		{
			"key": "randomEmail",
			"value": "dkhqUI@zoho.com"
		},
		{
			"key": "randomMobileNumber",
			"value": "01031892990"
		},
		{
			"key": "userID",
			"value": "15031269"
		},
		{
			"key": "randomStatus",
			"value": 0
		},
		{
			"key": "randomFirstName",
			"value": "Grace"
		},
		{
			"key": "randomLastName",
			"value": "Smith"
		},
		{
			"key": "randomUsername",
			"value": "grace smith"
		},
		{
			"key": "id",
			"value": 518
		},
		{
			"key": "catId",
			"value": 714
		},
		{
			"key": "tagID",
			"value": 603
		},
		{
			"key": "categoryname",
			"value": "qgkftjsii"
		},
		{
			"key": "petName",
			"value": "lxUSPareH"
		},
		{
			"key": "tagName",
			"value": "zviQpdQdl"
		},
		{
			"key": "petID",
			"value": 124
		},
		{
			"key": "status",
			"value": "pending"
		},
		{
			"key": "randomLink",
			"value": "https://example.com/page1?param1=value1&param2=value2&param3=value3"
		},
		{
			"key": "shipDate",
			"value": "2023-01-23T05:14:37Z+0200"
		},
		{
			"key": "updatedStatus",
			"value": "pending"
		},
		{
			"key": "updatedPetID",
			"value": 478
		},
		{
			"key": "updatedCatId",
			"value": 877
		},
		{
			"key": "updatedTagID",
			"value": 604
		},
		{
			"key": "updatedCategoryname",
			"value": "QDCypUTi"
		},
		{
			"key": "updatedPetName",
			"value": "JoLueMEE"
		},
		{
			"key": "updatedTagName",
			"value": "bxcVnsty"
		},
		{
			"key": "updatedStatusType",
			"value": "sold"
		},
		{
			"key": "updatedRandomLink",
			"value": "https://example.com/page1?param1=value1&param2=value2&param3=value3"
		},
		{
			"key": "updatedRandomEmail",
			"value": "haSAVKuHnmQk@hotmail.com"
		},
		{
			"key": "updatedRandomMobileNumber",
			"value": "01047954171"
		},
		{
			"key": "updatedUserID",
			"value": "44103153"
		},
		{
			"key": "updatedRandomStatus",
			"value": 1
		},
		{
			"key": "updatedRandomFirstName",
			"value": "Eva"
		},
		{
			"key": "updatedRandomLastName",
			"value": "Davis"
		},
		{
			"key": "updatedRandomUsername",
			"value": "eva davis"
		},
		{
			"key": "updatedRandomUserID",
			"value": "75445831"
		},
		{
			"key": "catID",
			"value": 979
		},
		{
			"key": "name",
			"value": "iotlWbwEe"
		},
		{
			"key": "pet_status",
			"value": "pending"
		},
		{
			"key": "pet_id",
			"value": 706
		},
		{
			"key": "updatedName",
			"value": "RShZCBuUUW"
		}
	]
}